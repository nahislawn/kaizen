// Generated by Dagger (https://dagger.dev).
package com.kaizenvpn.vpn.di.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "com.kaizenvpn.vpn.di.qualifier.ApplicationScope",
    "com.kaizenvpn.vpn.di.qualifier.DefaultDispatcher"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DispatcherModule_ProvidesCoroutineScopeFactory implements Factory<CoroutineScope> {
  private final DispatcherModule module;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public DispatcherModule_ProvidesCoroutineScopeFactory(DispatcherModule module,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.module = module;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public CoroutineScope get() {
    return providesCoroutineScope(module, dispatcherProvider.get());
  }

  public static DispatcherModule_ProvidesCoroutineScopeFactory create(DispatcherModule module,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new DispatcherModule_ProvidesCoroutineScopeFactory(module, dispatcherProvider);
  }

  public static CoroutineScope providesCoroutineScope(DispatcherModule instance,
      CoroutineDispatcher dispatcher) {
    return Preconditions.checkNotNullFromProvides(instance.providesCoroutineScope(dispatcher));
  }
}
