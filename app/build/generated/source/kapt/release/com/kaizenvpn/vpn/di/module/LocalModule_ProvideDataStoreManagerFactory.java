// Generated by Dagger (https://dagger.dev).
package com.kaizenvpn.vpn.di.module;

import com.kaizenvpn.vpn.data.preferences.DataStoreManager;
import com.kaizenvpn.vpn.data.preferences.DataStoreManagerImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LocalModule_ProvideDataStoreManagerFactory implements Factory<DataStoreManager> {
  private final Provider<DataStoreManagerImpl> dataStoreManagerImplProvider;

  public LocalModule_ProvideDataStoreManagerFactory(
      Provider<DataStoreManagerImpl> dataStoreManagerImplProvider) {
    this.dataStoreManagerImplProvider = dataStoreManagerImplProvider;
  }

  @Override
  public DataStoreManager get() {
    return provideDataStoreManager(dataStoreManagerImplProvider.get());
  }

  public static LocalModule_ProvideDataStoreManagerFactory create(
      Provider<DataStoreManagerImpl> dataStoreManagerImplProvider) {
    return new LocalModule_ProvideDataStoreManagerFactory(dataStoreManagerImplProvider);
  }

  public static DataStoreManager provideDataStoreManager(
      DataStoreManagerImpl dataStoreManagerImpl) {
    return Preconditions.checkNotNullFromProvides(LocalModule.INSTANCE.provideDataStoreManager(dataStoreManagerImpl));
  }
}
