// Generated by Dagger (https://dagger.dev).
package com.kaizenvpn.vpn.presentation.main;

import android.content.Context;
import com.kaizenvpn.vpn.data.preferences.DataStoreManager;
import com.kaizenvpn.vpn.data.repository.CommonRepository;
import com.kaizenvpn.vpn.data.repository.ServerRepository;
import com.kaizenvpn.vpn.data.repository.UserRepository;
import com.limerse.iap.IapConnector;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<UserRepository> userReposProvider;

  private final Provider<CommonRepository> commonReposProvider;

  private final Provider<ServerRepository> serverReposProvider;

  private final Provider<IapConnector> iapConnectorProvider;

  private final Provider<DataStoreManager> storeManagerProvider;

  public MainViewModel_Factory(Provider<Context> contextProvider,
      Provider<UserRepository> userReposProvider, Provider<CommonRepository> commonReposProvider,
      Provider<ServerRepository> serverReposProvider, Provider<IapConnector> iapConnectorProvider,
      Provider<DataStoreManager> storeManagerProvider) {
    this.contextProvider = contextProvider;
    this.userReposProvider = userReposProvider;
    this.commonReposProvider = commonReposProvider;
    this.serverReposProvider = serverReposProvider;
    this.iapConnectorProvider = iapConnectorProvider;
    this.storeManagerProvider = storeManagerProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(contextProvider.get(), userReposProvider.get(), commonReposProvider.get(), serverReposProvider.get(), iapConnectorProvider.get(), storeManagerProvider.get());
  }

  public static MainViewModel_Factory create(Provider<Context> contextProvider,
      Provider<UserRepository> userReposProvider, Provider<CommonRepository> commonReposProvider,
      Provider<ServerRepository> serverReposProvider, Provider<IapConnector> iapConnectorProvider,
      Provider<DataStoreManager> storeManagerProvider) {
    return new MainViewModel_Factory(contextProvider, userReposProvider, commonReposProvider, serverReposProvider, iapConnectorProvider, storeManagerProvider);
  }

  public static MainViewModel newInstance(Context context, UserRepository userRepos,
      CommonRepository commonRepos, ServerRepository serverRepos, IapConnector iapConnector,
      DataStoreManager storeManager) {
    return new MainViewModel(context, userRepos, commonRepos, serverRepos, iapConnector, storeManager);
  }
}
